기초 수학 이론
선대 : 계산용 전문용어
미적 : 최적화의 근본
최적화
확률론 : 위와 다른 50%.
 필요한 이유
  1) 데이터 *묘사*시에 데이터 셋을 확률로 묘사 => 통계
  2) 확휼론 <-연장- 논리학(3단논법 등) => 데이터 셋 뒤의 *법칙*찾기
   A->B (논리, 명제, 규칙, 법칙)
    처음에는 100%인 자연법칙에서 출발 -> 사회현상으로 이행되며 100%가 아닌 확률론으로...
    과거의 논리학에는 100%아 아니면 부정으로. 근데 확률론으로 넘어가며 정도를 기술 가능. => 베이지안 확률론(신뢰 정도를 나타내는 것)
 => 본인이 쓰면서 설명할 수 있어야 함
 => 모든 강의시에 수식을 종이에 써서 끝날 때 매니저에게 제출

컴퓨터 관리 및 프로그래밍 기술 (직업을 얻으려고 한다면)
 과거 : 고객분석, 마케팅 분석 등 => 보고서 등
 현대 : 피드백이 겁나 빠르다(비지니스에) - 만들기까지 본인이 해야함
 네트워크-프론트엔드-백엔드
리눅스 운영체제 사용법
프로그래밍 언어
데이터베이스 시스템
병렬처리, 가상화, 클라우드 사용법

데이터 분석 이론
확률 모형
검정 및 추정
회기 분석과 분류, 클러스터링

해당 분야에 대한 전문 지식(Domain knowledge)
해당 분야의 정보를 이해하고 분석 결과가 올바른지를 판단 할 수 있는 능력
이미지 처리, 음성/음향 처리, 텍스트 처리 등의 자료 전처리 기술

**이해+구현+데이터자체에 대한 이해(없으면 뭘 풀어야 하는지, 어떻게 풀어야 하는지, 그게 맞는지 모름)

데이터 분석이란?
 1. 관계 : 규칙/법칙
 2. 파악된 관계를 통하여 원하는 출력 데이터를 만들어 내는 과정 => 예측
 값이 주어졌을 때~
 시계열 예측 => forecasting
 결과 => 1. 숫자, 2. 단어(꽃 등)
 첫번째 문제 : 주관식, 두번째 : 객관식
 face recognition : 객관식
 바둑돌 : 객관식

연습문제 : 생각시 구체적으로
 목표설정의 필요성
독립변수/특징... => 종속변수/라벨/클래스...

~등/같은것xxxxx : 딱 찍기. 정의/규정이 나중에 해결에 영향을 줄 수 있다.
더 자세하게 사용 시나리오를 만들어라 : 이거이거이거를 이렇게 넣으면 이게 나온다.
 -많이 적어야 함

ES (전문가 시스템) => 규칙기반 방법
 사람이 보고 전문가가 규칙을 만든다. 그리고 코딩을하여 컴퓨터가 실행하게 한다
 Rule based expert system => 거의 실패, 그나마 성공한게 번역 시스템
 사람과 사람간 의사소통이 되어야 하는데, 현실은 너무 복잡하여 이것이 실패
  예외사항 : 번역 : 사전+문법+.... 그래도 예외발생 => 정확하게 룰을 규정 못함.
 인공지능 아님
AI (인공지능)
 기계학습이 들어가야 인공지능이라 불러줌
ML (기계학습)
 데이터에서 바로 결과물인 규칙을 컴퓨터가 바로 찾아서 적용
 워킹을 넘어서 알아서 러닝까지 할 수 있어야.

지도학습
 반복학습. 데이터를 직접 줌 : 문제와 정답을 제공 => **정답이 있어야 함**
 정답이 없으면 배울 수 없음
 정답을 붙이는 작업을 라벨링이라고 함. (훈련용 데이터 셋이 필요함)
 입력과 출력 데이터만 주면 알아서 규칙을 찾는게 머신러닝이다.

문장 그냥 주면 사전이나 문법책을 알아서 만들어 가는 과정 : 머신러닝

퀀텀점프 : 룰베이스드는 아무리 많은 룰을 만들어도 뉴럴시스템(머신러닝)을 따라잡을 수 없다.

"감인데요?"

스코어 카드 => 4가지 인자에다가 웹크롤링으로 스코어카드를 제공 어떰?

지도학습은 데이터 셋이 어마어마하게 중요함

콘볼루셔널 뉴럴 네트워크 => 2012년도 일

리페이페이 : 이미지넷 - 라벨링(아주 자세히 히에라키칼) - 320만장 - 라지스케일 비쥬얼 리코그니션 컴패티션(천지선다)-이미지넷 챌린지(2010~17) - alex net+gpu로 2012년에 깸 - 현재:사람 오차율 5%, 딥러닝 오차율 2%
 => 트레이닝 데이터 셋을 만듦 => 그만큼 중요하고 라벨링에 큰 노력을 요함

입/출력 안주는 러닝-
비지도학습 => 입력에 대해 출력을 맞추는 게 아님. 그냥 규칙을 찾아라
강화학습 => 사람이 데이터 셋을 줄 수 없어서 룰을 알려주는 시뮬레이터를 달아서 알아서 세트를 만들어 알아서 학습

시뮬레이터 : 룰베이스드

최대한 비슷한 함수찾기 = 최적화

P(Y|X) : Y의 확률, X : 주어진 상황(문제)
max : 가장 큰 값
arg : 아규먼트, 그 큰값의 위치(큰값의 값이 아니라)

데이터를 숫자로 만드는 것 : 전처리/인코딩
 =>엄청나게 많은 정보를 필요한 수준으로 걸러주는 필터링의 개념도
 =>어떻게 할 것인가? - 도메인 지식을 가지고 있어야 함
그 숫자로 수학적으로 예측

함수의 구멍수(입력 차원)는 고정(입력) - 다르면 걍 버리고 다시 만들어야 함

BOW 인코딩-
corpus & voca
단어를 단어장에 씀(중복무시)
단어에 번호붙임
모든 단어 모음(예 2만 단어)에 예시 데이터를 불러와 빈도수를 기록
무조건 20000개 입력 => 픽스드 인풋

-출력-
출력이 숫자냐 카테고리값이냐가 중요함
숫자 : 회귀분석
카테고리 : 분류

ZN : 주거비율
CHAS : 강조망권(0;1)

회귀분석 : 잘 플로팅 되느냐 - 실제로 규칙이 있는가

간과하는(알아채지 못하는) 법칙을 찾는 것 : 연역적 (슈퍼바이즈드, 수학)

머신러닝의 대전제 : 규칙이 존재해야 한다. <= 도메인 지식
절대적이다. = 규칙이 있다.
데이터로 봤을 때 모여있다 (클러스터링)

미스클래시피케이션데이터

과최적화
더 고칠거냐 말거냐 : 사실 모든 데이터를 봐야하지만, 다른 힌트들도 존재

뭉쳐지냐 아니냐

규칙찾기 : 비지도 학습

펀드비추 : 떼가는게 많음

머신러닝-코스트다운-새로운업무분야

데이터 분석 : CPython - 패키지가 껍데기만 파이썬이고 80%이상이 C이니까 연동이...

현업으로 간다면 3.5.x가 안전함
파이썬 배포판으로 까는 걸 추천하며 anaconda추천

Numpy, Scipy, Sympy, Pandas, Matplotlib, Seaborn

숙제-
연습문제들 하기
트레이닝 데이터 셋 만들어보기 (최소 10)
jupyter notebook 형태
일주일정도
